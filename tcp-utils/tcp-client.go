/*
tcp-client: TCP client
send data to a server

Nicola Ruggero 2020 <nicola@nxnt.org>
*/
package main

import (
	"bufio"
	"encoding/hex"
	"flag"
	"fmt"
	"log"
	"net"
	"time"

	ber "./asn1-ber"
)

func main() {

	// Command line options
	remoteAddr := flag.String("remote", ":4000", "remote address")
	flag.Parse()

	log.Println("TCP client")
	log.Println("Nicola Ruggero 2020 <nicola@nxnt.org>")

	// Connect to remote server
	conn, err := net.Dial("tcp", *remoteAddr)
	if err != nil {
		log.Fatal("Error dialing", err)
	}
	defer conn.Close()
	log.Println("Server connection to: ", conn.RemoteAddr())

	bufConn := bufio.NewReader(conn)
	for {
		// Send data to server
		_, err = conn.Write(pkt15())
		if err != nil {
			log.Println("Error write to server:", err)
			return
		}

		//n, err := ioutil.ReadAll(conn)
		packet, err := ber.ReadPacket(bufConn)
		if err != nil {
			log.Println("Error read from server:", err)
			return
		}

		// Calculate total lenght
		packetLen := len(packet.Bytes())
		log.Printf("Received %d bytes\n", packetLen)
		fmt.Printf("%s", hex.Dump(packet.Bytes()[:packetLen]))

		// Calculate lenght of the ASN.1 packet data without headers
		dataLen := packet.Data.Len()
		packetDataOffset := packetLen - dataLen
		fmt.Printf("LEN-Data: %d\n", dataLen)
		fmt.Printf("%s", hex.Dump(packet.Bytes()[packetDataOffset:packetLen]))

		// Sanity check on the packet's children
		childrenLen := len(packet.Children)
		fmt.Printf("LEN-Children: %d\n", childrenLen)
		if childrenLen == 0 {
			log.Println("Invalid packet: no children found")
			continue
		}
		if packet.Children[0].Tag != ber.TagInteger {
			log.Println("Unrecognized messageID", packet.Children[0].Value)
			continue
		}

		// Calculate lenght of the remaining ASN.1 packet without headers and LDAP messageID
		dataMessageIDLen := len(packet.Children[0].Bytes())
		packetDataNoMsgIDOffset := packetDataOffset + dataMessageIDLen
		//fmt.Printf("messageID: %d\n", packet.Children[0].Value.(int64))
		fmt.Printf("LEN-messageID: %d\n", dataMessageIDLen)
		fmt.Printf("%s", hex.Dump(packet.Bytes()[packetDataNoMsgIDOffset:packetLen]))

		//fmt.Printf("%s", hex.Dump(packet.Bytes()))
		ber.PrintPacket(packet)

		time.Sleep(2 * time.Second)
	}
}

/* Frame (212 bytes) */
func pkt15() []byte {
	return []byte{
		0x30, 0x81, 0xd1, 0x02, 0x01, 0x02, /* 0..... */
		0x63, 0x81, 0xae, 0x04, 0x10, 0x63, 0x6e, 0x3d, /* c....cn= */
		0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x43, 0x6f, /* OracleCo */
		0x6e, 0x74, 0x65, 0x78, 0x74, 0x0a, 0x01, 0x02, /* ntext... */
		0x0a, 0x01, 0x03, 0x02, 0x01, 0x00, 0x02, 0x01, /* ........ */
		0x00, 0x01, 0x01, 0x00, 0xa1, 0x2a, 0xa3, 0x1a, /* .....*.. */
		0x04, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, /* ..object */
		0x63, 0x6c, 0x61, 0x73, 0x73, 0x04, 0x0b, 0x6f, /* class..o */
		0x72, 0x63, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, /* rclConte */
		0x78, 0x74, 0xa3, 0x0c, 0x04, 0x02, 0x63, 0x6e, /* xt....cn */
		0x04, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, /* ..common */
		0x30, 0x5f, 0x04, 0x0b, 0x6f, 0x72, 0x63, 0x6c, /* 0_..orcl */
		0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x04, /* version. */
		0x15, 0x6f, 0x72, 0x63, 0x6c, 0x44, 0x65, 0x66, /* .orclDef */
		0x61, 0x75, 0x6c, 0x74, 0x53, 0x75, 0x62, 0x73, /* aultSubs */
		0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x04, 0x1f, /* criber.. */
		0x6f, 0x72, 0x63, 0x6c, 0x53, 0x75, 0x62, 0x73, /* orclSubs */
		0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x4e, 0x69, /* criberNi */
		0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x74, /* ckNameAt */
		0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x04, /* tribute. */
		0x18, 0x6f, 0x72, 0x63, 0x6c, 0x53, 0x75, 0x62, /* .orclSub */
		0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x53, /* scriberS */
		0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x61, 0x73, /* earchBas */
		0x65, 0xa0, 0x1b, 0x30, 0x19, 0x04, 0x17, 0x32, /* e..0...2 */
		0x2e, 0x31, 0x36, 0x2e, 0x38, 0x34, 0x30, 0x2e, /* .16.840. */
		0x31, 0x2e, 0x31, 0x31, 0x33, 0x37, 0x33, 0x30, /* 1.113730 */
		0x2e, 0x33, 0x2e, 0x34, 0x2e, 0x32, /* .3.4.2 */
	}
}
